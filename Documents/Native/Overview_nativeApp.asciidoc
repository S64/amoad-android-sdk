== AMoAdネイティブ広告（SDK for Android） 概要 - nativeApp

=== 目次
** <<i, 1.ネイティブ広告の種類>>
** <<ii, 2.表示位置のコントロール>>
** <<iii, 3.sidとは？>>
** <<iv, 4.SDKの使い方>>

''''
[[i]]
=== 1.ネイティブ広告の種類
表示広告種類は、画像の有無、テキストの長さなどによって、以下の3タイプあります。

.ネイティブ広告の種類（ネイティブApp）
|===
|広告枠フォーマット |表示広告種類 |要素 |リソース型
.11+|ネイティブApp .2+|一行テキスト|テキスト（ショート） |TextView
|サービス名 |TextView
.4+|アイコン画像＋テキスト |アイコン画像 |ImageView
|テキスト（ショート） | TextView
|テキスト（ロング） | TextView
|サービス名 |TextView
.5+| メイン画像＋テキスト |メイン画像 |ImageView
|アイコン画像 |ImageView
|テキスト（ショート） |TextView
|テキスト（ロング） |TextView
|サービス名 |TextView
|===

.アイコン画像＋テキストの例
image:https://qiita-image-store.s3.amazonaws.com/1726/60244/b62232fc-b88e-a36a-d6af-f531a18ac086.png[
"アイコン画像＋テキスト", width=320]

[[ii]]
=== 2.広告取得数のコントロール
広告枠フォーマット「ネイティブApp」は、
管理画面より広告取得数を設定できます。

.管理画面
image:images/n-admin-01.png[
"管理画面", width=320]

TIP: 「広告取得数」はSDK内部で同時に取得する件数です。
広告表示速度と広告のばらつきに影響しますので調整してください。
1に設定すると（効果の高い）同じ広告ばかり表示される可能性があります。

[[iii]]
=== 3.sidとは？
管理画面で広告枠を作成したときに発行されるIDです。
SDKの機能を呼び出すために複数の箇所から参照しますので、
文字列定数などに保持しておくことをお勧めします。

[[iv]]
=== 4.SDKの使い方
SDKへのアクセスは広告表示マネージャ（AMoAdNativeViewManager）を
使って行います。

Step 1 広告表示マネージャの準備::
prepareAdメソッドを呼び出して広告表示の準備をする。
この時点で広告サーバに広告情報をリクエストします
（画像をプリロードすることもできます）。

TIP: 管理画面の広告枠フォーマット、
表示広告種類に合ったprepareAdを呼び出す必要があります。

Step 2 広告Viewオブジェクトを取得して画面に貼る::
AMoAdNativeViewManager.getInstance(context).createView(...)で取得したビューを
addViewメソッドで画面に追加します。
createViewに渡すレイアウトIDはあらかじめ用意しておきます。

TIP: レイアウトファイルを作成し、
ImageViewとTextViewを配置します。
広告要素にはそれぞれtagが振られており、
tagにそのtagを指定することで自動的にセルが構築されます。

IMPORTANT: 詳細は Native SDK Guide for Android を参照ください。
